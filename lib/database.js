// Generated by CoffeeScript 1.9.2
(function() {
  var Api, Database, Document;

  Api = require('./api');

  Document = require('./document');

  Database = (function() {
    Database.DOCUMENTS_BY_ENTITY_NAME_INDEX = 'Raven/DocumentsByEntityName';

    Database.DYNAMIC_INDEX = 'dynamic';

    function Database(datastore, name1, apiProvider) {
      this.datastore = datastore;
      this.name = name1;
      if (apiProvider == null) {
        apiProvider = Api;
      }
      this.api = new apiProvider(this.datastore.url, this.name);
    }

    Database.prototype.getUrl = function() {
      return this.api.getUrl();
    };

    Database.prototype.getDocsUrl = function() {
      return this.api.getDocsUrl();
    };

    Database.prototype.getDocUrl = function(id) {
      return this.api.getDocUrl(id);
    };

    Database.prototype.getIndexesUrl = function() {
      return this.api.getIndexesUrl();
    };

    Database.prototype.getIndexUrl = function(index) {
      return this.api.getIndexUrl(index);
    };

    Database.prototype.getTermsUrl = function(index, field) {
      return this.api.getTermsUrl(index, field);
    };

    Database.prototype.getStaticUrl = function() {
      return this.api.getStaticUrl();
    };

    Database.prototype.getAttachmentUrl = function(id) {
      return this.api.getAttachmentUrl(id);
    };

    Database.prototype.getQueriesUrl = function() {
      return this.api.getQueriesUrl();
    };

    Database.prototype.getBulkDocsUrl = function() {
      return this.api.getBulkDocsUrl();
    };

    Database.prototype.getBulkDocsIndexUrl = function(index, query) {
      return this.api.getBulkDocsIndexUrl(index, query);
    };

    Database.prototype.getStatsUrl = function() {
      return this.api.getStatsUrl();
    };

    Database.prototype.setAuthorization = function(authValue) {
      return this.api.setAuthorization(authValue);
    };

    Database.prototype.setBasicAuthorization = function(username, password) {
      return this.api.setBasicAuthorization(username, password);
    };

    Database.prototype.setProxy = function(proxyUrl) {
      return this.api.setProxy(proxyUrl);
    };

    Database.prototype.getCollections = function(cb) {
      this.apiGet(this.getTermsUrl(Database.DOCUMENTS_BY_ENTITY_NAME_INDEX, 'Tag'), function(error, response) {
        if (!error && response.statusCode === 200) {
          if (cb != null) {
            return cb(null, JSON.parse(response.body));
          }
        } else if (cb != null) {
          return cb(error);
        }
      });
      return null;
    };

    Database.prototype.saveDocument = function(collection, doc, cb) {
      var op, url;
      op = this.apiPost;
      url = this.getDocsUrl();
      if (typeof collection === 'object' && collection !== null) {
        cb = doc;
        doc = collection;
        collection = null;
      }
      if (doc.id != null) {
        op = this.apiPut;
        url = this.getDocUrl(doc.id);
        doc = Document.fromObject(doc);
        delete doc.id;
      }
      if (doc.getMetadataValue('Raven-Entity-Name') == null) {
        if (collection != null) {
          doc.setMetadataValue('Raven-Entity-Name', collection);
        }
      }
      op.call(this, url, doc, doc.getMetadata(), function(error, response) {
        if (!error && response.statusCode === 201) {
          doc.setMetadataValues(JSON.parse(response.body));
          doc.id = doc.getMetadataValue('key');
          if (cb != null) {
            return cb(null, doc);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to create document: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.getDocument = function(id, cb) {
      var url;
      url = this.getDocUrl(id);
      this.apiGet(url, function(error, response) {
        var doc;
        if (!error && response.statusCode === 200) {
          doc = Document.fromObject(JSON.parse(response.body));
          doc.setMetadataValues(response.headers);
          doc.id = doc.getMetadataValue('key');
          return cb(null, doc);
        } else {
          return cb(error);
        }
      });
    };

    Database.prototype.getDocuments = function(ids, cb) {
      var url;
      url = this.getQueriesUrl();
      this.apiPost(url, ids, function(error, response) {
        if (!error && response.statusCode === 200) {
          if (cb != null) {
            return cb(null, response.body);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to find documents: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.deleteDocument = function(id, cb) {
      var url;
      url = this.getDocUrl(id);
      this.apiDelete(url, function(error, response) {
        if (!error && response.statusCode === 204) {
          if (cb != null) {
            return cb(null, response.body);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to delete document: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.deleteDocuments = function(index, query, cb) {
      var url;
      url = this.getBulkDocsIndexUrl(index, query);
      this.apiDelete(url, function(error, response) {
        var ref;
        if (!error && response.statusCode === 200) {
          if (cb != null) {
            return cb(null, ((response != null ? (ref = response.body) != null ? ref.length : void 0 : void 0) != null) > 0 ? JSON.parse(response.body) : null);
          }
        } else {
          if (cb != null) {
            if (typeof error === "function" ? error(cb(error)) : void 0) {

            } else {
              return cb(new Error('Unable to delete documents: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.find = function(doc, start, count, cb) {
      if (typeof start === 'function') {
        cb = start;
        start = null;
        count = null;
      } else if (typeof count === 'function') {
        cb = count;
        count = null;
      }
      this.dynamicQuery(doc, start, count, function(error, results) {
        var matches;
        if (!error) {
          results = JSON.parse(results.body);
          matches = (results != null ? results.Results : void 0) != null ? results.Results : null;
        }
        return cb(error, matches);
      });
    };

    Database.prototype.getDocsInCollection = function(collection, start, count, cb) {
      if (typeof start === 'function') {
        cb = start;
        start = null;
        count = null;
      } else if (typeof count === 'function') {
        cb = count;
        count = null;
      }
      this.queryRavenDocumentsByEntityName(collection, start, count, function(error, results) {
        if (error == null) {
          results = JSON.parse(results.body);
        }
        return cb(error, (results != null ? results.Results : void 0) != null ? results.Results : null);
      });
    };

    Database.prototype.getDocumentCount = function(collection, cb) {
      this.queryRavenDocumentsByEntityName(collection, 0, 0, function(error, response) {
        var manufacturedError, results;
        if (error != null) {
          cb(error, null);
          return;
        }
        manufacturedError = new Error("Unable to get document count: " + response.statusCode + " - " + response.body);
        if (response.statusCode >= 400) {
          cb(manufacturedError, null);
          return;
        }
        results = JSON.parse(response.body);
        if ((results != null ? results.TotalResults : void 0) != null) {
          return cb(null, results.TotalResults);
        } else {
          return cb(manufacturedError, null);
        }
      });
    };

    Database.prototype.getStats = function(cb) {
      this.apiGet(this.getStatsUrl(), function(error, results) {
        var stats;
        if (error == null) {
          stats = JSON.parse(results.body);
        }
        return cb(error, stats);
      });
    };

    Database.prototype.dynamicQuery = function(doc, start, count, cb) {
      return this.queryByIndex(Database.DYNAMIC_INDEX, doc, start, count, cb);
    };

    Database.prototype.queryRavenDocumentsByEntityName = function(name, start, count, cb) {
      var search;
      search = name != null ? {
        Tag: name
      } : null;
      return this.queryByIndex(Database.DOCUMENTS_BY_ENTITY_NAME_INDEX, search, start, count, cb);
    };

    Database.prototype.queryByIndex = function(index, query, start, count, fetch, cb) {
      var url;
      if (start == null) {
        start = 0;
      }
      if (count == null) {
        count = 25;
      }
      if (typeof start === 'function') {
        cb = start;
        start = null;
        count = null;
        fetch = null;
      } else if (typeof count === 'function') {
        cb = count;
        count = null;
        fetch = null;
      } else if (typeof fetch === 'function') {
        cb = fetch;
        fetch = null;
      }
      url = (this.getIndexUrl(index)) + "?start=" + start + "&pageSize=" + count + "&aggregation=None";
      if (query != null) {
        url += "&query=" + (this.luceneQueryArgs(query));
      }
      if (fetch != null) {
        url += "&fetch=" + (this.luceneFetchArgs(fetch));
      }
      return this.apiGet(url, cb);
    };

    Database.prototype.createIndex = function(name, map, reduce, cb) {
      var index, url;
      if (typeof reduce === 'function') {
        cb = reduce;
        reduce = null;
      }
      url = this.getIndexUrl(name);
      index = {
        Map: map
      };
      if (reduce != null) {
        index['Reduce'] = reduce;
      }
      return this.apiPut(url, index, function(error, response) {
        var ref;
        if (!error && response.statusCode === 201) {
          if (cb != null) {
            return cb(null, ((response != null ? (ref = response.body) != null ? ref.length : void 0 : void 0) != null) > 0 ? JSON.parse(response.body) : null);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to create index: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.deleteIndex = function(index, cb) {
      var url;
      url = this.getIndexUrl(index);
      return this.apiDelete(url, function(error, response) {
        var ref;
        if (!error && response.statusCode === 204) {
          if (cb != null) {
            return cb(null, ((response != null ? (ref = response.body) != null ? ref.length : void 0 : void 0) != null) > 0 ? JSON.parse(response.body) : null);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to delete index: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.saveAttachment = function(docId, content, headers, cb) {
      var url;
      url = this.getAttachmentUrl(docId);
      return this.apiPut(url, content, headers, function(error, response) {
        var ref;
        if (!error && response.statusCode === 201) {
          if (cb != null) {
            return cb(null, ((response != null ? (ref = response.body) != null ? ref.length : void 0 : void 0) != null) > 0 ? JSON.parse(response.body) : null);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to save attachment: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.getAttachment = function(id, cb) {
      var url;
      url = this.getAttachmentUrl(id);
      return this.apiGet(url, function(error, response) {
        if (!error && response.statusCode === 200) {
          return cb(null, response);
        } else {
          return cb(error);
        }
      });
    };

    Database.prototype.deleteAttachment = function(id, cb) {
      var url;
      url = this.getAttachmentUrl(id);
      return this.apiDelete(url, function(error, response) {
        if (!error && response.statusCode === 204) {
          if (cb != null) {
            return cb(null, response.body);
          }
        } else {
          if (cb != null) {
            if (error != null) {
              return cb(error);
            } else {
              return cb(new Error('Unable to delete attachment: ' + response.statusCode + ' - ' + response.body));
            }
          }
        }
      });
    };

    Database.prototype.luceneQueryArgs = function(query) {
      return this.api.luceneQueryArgs(query);
    };

    Database.prototype.luceneFetchArgs = function(fetch) {
      return this.api.luceneFetchArgs(fetch);
    };

    Database.prototype.useRavenHq = function(apiKey, cb) {
      return this.api.useRavenHq(apiKey, (function(_this) {
        return function(error, authorizationHeaderValue) {
          _this.setAuthorization(authorizationHeaderValue);
          if (cb != null) {
            return cb(error, authorizationHeaderValue);
          }
        };
      })(this));
    };

    Database.prototype.apiGet = function(url, headers, cb) {
      return this.api.get(url, headers, cb);
    };

    Database.prototype.apiPut = function(url, body, headers, cb) {
      return this.api.put(url, body, headers, cb);
    };

    Database.prototype.apiPost = function(url, body, headers, cb) {
      return this.api.post(url, body, headers, cb);
    };

    Database.prototype.apiPatch = function(url, body, headers, cb) {
      return this.api.patch(url, body, headers, cb);
    };

    Database.prototype.apiDelete = function(url, body, headers, cb) {
      return this.api["delete"](url, body, headers, cb);
    };

    return Database;

  })();

  module.exports = Database;

}).call(this);
